/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package GUI;

import BO.CitaBO;
import DAO.CitaDAO;
import DAO.UsuarioDAO;
import entidades.Cita;
import excepciones.PersistenciaException;
import exception.NegocioException;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.time.Duration;
import java.time.LocalDateTime;

/**
 *
 * @author Admin
 */
public class citasPendientesTableForm extends javax.swing.JPanel {

    /**
     * Creates new form crearCuentaForm
     */
    public citasPendientesTableForm() {
        initComponents();
        cargarDatosEnTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        jTextField2.setText("jTextField2");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 48)); // NOI18N
        jLabel1.setText("Citas Pendientes");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 10, -1, -1));

        jTable1.setBackground(new java.awt.Color(153, 153, 153));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "idCita", "Fecha_Hora", "Tipo", "idPaciente", "Paciente", "Iniciar Consulta", "Historial"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, 740, 440));

        jButton1.setBackground(new java.awt.Color(0, 0, 0));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Regresar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 570, -1, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //Regresar
        javax.swing.JFrame frameActual = (javax.swing.JFrame) javax.swing.SwingUtilities.getWindowAncestor(this);

        javax.swing.JFrame frame = new javax.swing.JFrame("Menu medico");
        menuMedicoForm agendaCitas = new menuMedicoForm();

        frame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(agendaCitas);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        if (frameActual != null) {
            frameActual.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cargarDatosEnTabla() {
        CitaDAO citaDAO = new CitaDAO();
        UsuarioDAO usuarioDAO = new UsuarioDAO();
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();

        try {
            List<Cita> citas = citaDAO.obtenerCitasPendientesMedico(utils.InicioSesion.getIdUsuario());
            tableModel.setRowCount(0);

            for (Cita cita : citas) {
                int idCita = cita.getIdCita();
                int idPaciente = cita.getIdPaciente();
                LocalDateTime fechaHora = cita.getFechaHora();
                String tipoCita = cita.getTipo();
                String nombrePaciente = usuarioDAO.obtenerNombre(idPaciente);

                boolean consultaIniciable = false; // Inicializamos como false por defecto
                LocalDateTime ahora = LocalDateTime.now();

                // Verificar si la consulta es iniciable según el tipo de cita
                if (tipoCita.equals("Emergencia")) {
                    Duration duracion = Duration.between(fechaHora, ahora);
                    // La consulta es iniciable si la hora actual es igual o posterior a fechaHora y no supera los 10 minutos
                    if (!ahora.isBefore(fechaHora) && duracion.toMinutes() <= 10) {
                        consultaIniciable = true;
                    }
                } else if (tipoCita.equals("Programada")) {
                    Duration duracion = Duration.between(fechaHora, ahora);
                    // La consulta es iniciable si la hora actual es igual o posterior a fechaHora y no supera los 15 minutos
                    if (!ahora.isBefore(fechaHora) && duracion.toMinutes() <= 15) {
                        consultaIniciable = true;
                    }
                }

                // Agregar la fila
                tableModel.addRow(new Object[]{idCita, fechaHora, tipoCita, idPaciente, nombrePaciente, consultaIniciable ? "Iniciar consulta" : "", "Ver historial"});
            }

            jTable1.addMouseListener(new MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    // Obtener la fila y columna clicada
                    int row = jTable1.rowAtPoint(e.getPoint());
                    int col = jTable1.columnAtPoint(e.getPoint());

                    // Verificar si el clic fue en una celda válida
                    if (row >= 0 && col >= 0) {
                        // Obtener los valores de la fila clicada
                        int idCita = (int) jTable1.getValueAt(row, 0); // ID Cita (columna 0)
                        int idPaciente = (int) jTable1.getValueAt(row, 3); // ID Paciente (columna 3)
                        Object valorCelda = jTable1.getValueAt(row, col); // Valor de la celda clicada

                        // Verificar si se hizo clic en "Iniciar consulta"
                        if (col == 5 && "Iniciar consulta".equals(valorCelda)) {
                            iniciarConsulta(idCita); // Llamar al método iniciarConsulta
                        }

                        // Verificar si se hizo clic en "Ver historial"
                        if (col == 6 && "Ver historial".equals(valorCelda)) {
                            verHistorial(idPaciente); // Llamar al método verHistorial
                        }
                    }
                }
            });

        } catch (PersistenciaException | SQLException ex) {
            Logger.getLogger(agendaCitasTableForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void iniciarConsulta(int idCita) {
        try {
            Cita cita = new CitaBO().consultarCita(idCita);
            if (cita.getTipo().equals("Programada")) {
                abirJFrameDatosConsultaForm(idCita);
            } else if (cita.getTipo().equals("Emergencia")) {
                abrirJFrameIniciarConsultaForm(idCita);
            }
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    public void verHistorial(int idPaciente) {
        abrirJFrameHistorial(idPaciente);
    }

    public void abirJFrameDatosConsultaForm(int idCita) {
        javax.swing.JFrame frameActual = (javax.swing.JFrame) javax.swing.SwingUtilities.getWindowAncestor(this);

        javax.swing.JFrame frame = new javax.swing.JFrame("Consulta");
        datosConsultaForm agendaCitas = new datosConsultaForm(idCita);

        frame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(agendaCitas);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        if (frameActual != null) {
            frameActual.dispose();
        }
    }

    private void abrirJFrameIniciarConsultaForm(int idCita) {
        javax.swing.JFrame frameActual = (javax.swing.JFrame) javax.swing.SwingUtilities.getWindowAncestor(this);

        javax.swing.JFrame frame = new javax.swing.JFrame("Historial clinico paciente");
        iniciarConsultaForm agendaCitas = new iniciarConsultaForm(idCita);

        frame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(agendaCitas);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        if (frameActual != null) {
            frameActual.dispose();
        }
    }

    private void abrirJFrameHistorial(int idPaciente) {
        javax.swing.JFrame frameActual = (javax.swing.JFrame) javax.swing.SwingUtilities.getWindowAncestor(this);

        javax.swing.JFrame frame = new javax.swing.JFrame("Historial clinico paciente");
        historialConsultasPacienteTableForm2 agendaCitas = new historialConsultasPacienteTableForm2(idPaciente);

        frame.setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
        frame.getContentPane().add(agendaCitas);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        if (frameActual != null) {
            frameActual.dispose();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
